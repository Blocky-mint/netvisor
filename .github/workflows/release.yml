name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-binaries:
    name: Build Daemon Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: netvisor-daemon-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: netvisor-daemon-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary: netvisor-daemon-darwin-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: netvisor-daemon-darwin-arm64
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   binary: netvisor-daemon-windows-amd64.exe
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.90.0
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend
          key: ${{ matrix.target }}
      
      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Setup Perl on Windows
        if: matrix.os == 'windows-latest'
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.38'
      
      - name: Install Perl dependencies (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cpan -T Locale::Maketext::Simple
      
      - name: Build daemon
        working-directory: backend
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
            cargo build --release --bin daemon --target ${{ matrix.target }}
          else
            cargo build --release --bin daemon --target ${{ matrix.target }}
          fi
        shell: bash
      
      - name: Prepare binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp backend/target/${{ matrix.target }}/release/daemon.exe ${{ matrix.binary }}
          else
            cp backend/target/${{ matrix.target }}/release/daemon ${{ matrix.binary }}
          fi
          chmod +x ${{ matrix.binary }} || true
        shell: bash
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: ${{ matrix.binary }}
          retention-days: 1

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-binaries
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get release version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Sync daemon compose template
        run: cp docker-compose.daemon.yml ui/src/lib/templates/

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet ui/src/lib/templates/docker-compose.daemon.yml; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit updated template
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ui/src/lib/templates/docker-compose.daemon.yml
          git commit -m "chore: sync daemon compose template"
          git push
      
      # Build combined Server + UI image (NEW)
      - name: Build and push Server image (with embedded UI)
        uses: docker/build-push-action@v5
        with:
          context: .  # Build from project root to access both backend/ and ui/
          file: ./backend/Dockerfile  # Path to the new Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            PUBLIC_SERVER_HOSTNAME=default
            PUBLIC_SERVER_PORT=60072
          tags: |
            mayanayza/netvisor-server:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/server:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Build Daemon image (unchanged)
      - name: Build and push Daemon image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.daemon
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            mayanayza/netvisor-daemon:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/daemon:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-docker]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Get release version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            netvisor-daemon-*/netvisor-daemon-*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}