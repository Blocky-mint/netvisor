name: Release

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary: netvisor-daemon-linux-x86_64
            use_cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary: netvisor-daemon-linux-aarch64
            use_cross: true
          - os: macos-latest
            target: aarch64-apple-darwin
            binary: netvisor-daemon-darwin-arm64
            use_cross: false
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@1.90.0
        with:
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend
          key: ${{ matrix.target }}
      
      - name: Install OpenSSL (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config
      
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      
      - name: Build daemon
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --bin daemon --target ${{ matrix.target }}
          else
            cargo build --release --bin daemon --target ${{ matrix.target }}
          fi
      
      - name: Prepare binary
        run: |
          cp target/${{ matrix.target }}/release/daemon ../${{ matrix.binary }}
          chmod +x ../${{ matrix.binary }}
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary }}
          path: ${{ matrix.binary }}
          retention-days: 1

  build-docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build-binaries
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get release version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Sync daemon compose template
        run: cp docker-compose.daemon.yml ui/src/lib/templates/

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet ui/src/lib/templates/docker-compose.daemon.yml; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit updated template
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add ui/src/lib/templates/docker-compose.daemon.yml
          git commit -m "chore: sync daemon compose template"
          git push
      
      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: ./ui
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            mayanayza/netvisor-ui:${{ steps.version.outputs.version }}
            mayanayza/netvisor-ui:latest
            ghcr.io/${{ github.repository }}/ui:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/ui:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Server image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            mayanayza/netvisor-server:${{ steps.version.outputs.version }}
            mayanayza/netvisor-server:latest
            ghcr.io/${{ github.repository }}/server:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Daemon image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.daemon
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            mayanayza/netvisor-daemon:${{ steps.version.outputs.version }}
            mayanayza/netvisor-daemon:latest
            ghcr.io/${{ github.repository }}/daemon:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository }}/daemon:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  upload-binaries:
    name: Upload ${{ matrix.binary }} to Release
    runs-on: ubuntu-latest
    needs: build-docker
    strategy:
      matrix:
        binary:
          - netvisor-daemon-linux-x86_64
          - netvisor-daemon-linux-aarch64
          - netvisor-daemon-darwin-arm64
    
    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.binary }}
      
      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.binary }}
  

  update-fixtures:
    name: Update Test Fixtures
    runs-on: ubuntu-latest
    needs: upload-binaries
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get release version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Update fixtures for release
        run: |
          # Verify the new fixture was created by previous CI/local runs
          if [ ! -f backend/src/tests/netvisor-next.sql ]; then
            echo "Error: netvisor-next.sql not found. Run integration tests locally first."
            exit 1
          fi
          
          # Replace old fixture with new one
          cd backend/src/tests
          rm -f netvisor.sql
          mv netvisor-next.sql netvisor.sql
          
          echo "âœ“ Replaced netvisor.sql with netvisor-next.sql"
      
      - name: Commit updated fixtures
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add backend/src/tests/netvisor.sql
          git commit -m "chore: update test fixtures for ${{ steps.version.outputs.version }}" || echo "No fixture changes"
          git push origin HEAD:main || echo "No changes to push"